use std::intrinsics::offset;

use crate::value::{self, Value, ValueArray};

#[derive(Debug)]
#[repr(u8)]
pub enum OpCode{
    Return,
    Op_Constnats,
}

#[derive(Debug)]
pub struct Chunk {
    pub code:Vec<u8>,
    pub constants:ValueArray
}

impl Chunk{
    pub fn disassembleChunk(&mut self,name:&str){
        println!("== {} ==",name);

        for mut offset in 0..self.code.len()  {
            offset = self.disassembleInstruction(offset)
        }
    }
    pub fn addConstant(&mut self,value:Value)-> usize{
        self.constants.values.push(value);
        self.constants.values.len() -1
    }

    fn disassembleInstruction(&mut self,offset:usize)->usize{
        print!("{:04} ",offset);

        let instruction = self.code[offset];
        match unsafe {
            core::mem::transmute::<u8,OpCode>(instruction)
        }{
            OpCode::Return => {
                println!("OP_RETURN");
                offset + 1
            },
            OpCode::Op_Constnats =>{
                let constant = self.code[offset +1];
                print!("{:<16} {:>4}","OP_CONSTANT",constant);
            }
            _=>todo!()
        }
    }
}
